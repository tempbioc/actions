name: 'Prepare MacOS system'
description: 'Prepare system for building R packages'
inputs:
  version:
    description: 'Version of R'
    default: 'release'
    required: false
  fortran:
    description: 'Package uses Fortran'
    required: false
  jags:
    description: 'Package depends on JAGS'
    required: false

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        sudo mkdir -p /opt
        sudo chown $USER /opt

    - name: Cache tools
      uses: actions/cache@v4
      with:
        path: |
          /opt/X11
          /opt/gfortran
          /opt/R/x86_64
        key: ${{ runner.os }}-${{ inputs.version }}-18

    - shell: bash
      run: |
        echo "::group::Removing Homebrew"
        cp $(which gtar git-lfs rustup-init) .
        brew unlink $(brew list --formula) || true
        sudo rm -vf $(which brew)
        sudo mv /usr/local/Homebrew /usr/local/oldhomebrew
        sudo mv /usr/local/Cellar /usr/local/oldcellar
        cp -f gtar git-lfs rustup-init /usr/local/bin/
        hash -r
        echo "Done removing homebrew!"
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH
        cargo --version
        echo "::endgroup::"

    - shell: bash
      run: |
        if [ -d "/opt/X11/lib" ]; then
          echo "/opt/X11/lib exists. Skipping xQuartz installation"
        else
          echo "::group::Installing XQuartz"
          echo "Downloading XQuartz..."
          curl --retry 3 -fLO https://github.com/XQuartz/XQuartz/releases/download/XQuartz-2.8.5/XQuartz-2.8.5.pkg
          sudo installer -pkg "XQuartz-2.8.5.pkg" -target /
          rm -f XQuartz-2.8.5.pkg
          echo "Done installing XQuartz!"
          echo "::endgroup::"
        fi

    - shell: bash
#      if: inputs.fortran
      run: |
        if [ -d "/opt/gfortran/bin" ]; then
          echo "/opt/gfortran/bin exists. Skipping fortran installation"
        else
          echo "::group::Installing Fortran"
          echo "Downloading Fortran..."
          curl --retry 3 -fsSLO https://github.com/R-macos/gcc-12-branch/releases/download/12.2-darwin-r0.1/gfortran-12.2-universal.pkg
          sudo installer -pkg "gfortran-12.2-universal.pkg" -target /
          rm -f gfortran-12.2-universal.pkg

          #Backward compat R-4.2
          sudo ln -sf /opt/gfortran /usr/local/gfortran
          #sed -i.bak 's|darwin18/8.2.0|darwin20.0/12.2.0|g' $(R RHOME)/etc/Makeconf  
          echo "Done installing Fortran!"
          echo "::endgroup::"
        fi
        echo "/opt/gfortran/bin" >> $GITHUB_PATH

    - shell: R
      run: |
        print("::group::Installing Simon's CRAN binaries")
        source("https://mac.R-project.org/bin/install.R")
        pkgs <- c("fftw",         # CRAN ffw, ffwtools, PoissonBinomial, qqconf
                  "fribidi",      # CRAN ragg, textshaping
                  "gsl",          # BioC GLAD
                  "glpk",         # BioC MMUPHin
                  "hdf5",         # CRAN ncdf4 for Bioc mzR
                  "harfbuzz",     # CRAN ragg, textshaping
                  "netcdf",       # CRAN ncdf4 for Bioc mzR
                  "openssl",
                  "pkgconfig",
                  "pcre2",        # CRAN rJava
                  "proj",         # CRAN proj4
                  "protobuf",     # CRAN protolib
                  "udunits",      # CRAN lwgeom, sf, units
                  "xz")
        install.libs(pkgs)

    - shell: bash
      run: |
        echo "::group::Update PATH, PKG_CONFIG_PATH, OPENSSL_LIBS"
        PATH="/opt/R/x86_64/bin:$PATH"
        echo "/opt/R/x86_64/bin" >> $GITHUB_PATH
        export PKG_CONFIG_PATH="/opt/R/x86_64/lib/pkgconfig:/opt/R/x86_64/share/pkgconfig:/usr/lib/pkgconfig:/opt/X11/lib/pkgconfig:/opt/X11/share/pkgconfig"
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> $GITHUB_ENV
        echo "Available libs through pkg-config:"
        pkg-config --list-all
        echo "OPENSSL_LIBS=/opt/R/x86_64/lib/libssl.a /opt/R/x86_64/lib/libcrypto.a" >> $GITHUB_ENV
        echo "::endgroup::"

    - shell: bash
      run: |
        if pandoc --version 2>/dev/null; then
          echo "Skipping pandoc installation"
        else
          echo "::group::Installing Pandoc"
          curl --retry 3 -fOL https://github.com/jgm/pandoc/releases/download/3.1.12.1/pandoc-3.1.12.1-x86_64-macOS.pkg
          sudo installer -pkg pandoc-3.1.12.1-x86_64-macOS.pkg -target /
          rm -f pandoc-3.1.12.1-x86_64-macOS.pkg
          cp -f /usr/local/bin/pandoc /opt/R/x86_64/bin/  #Copy to cache
          echo "::endgroup::"
        fi

    - name: "Install JAGS if needed"
      shell: bash
      run: |
        echo "::group::Installing JAGS"
        curl --retry 3 -fLO https://github.com/autobrew/bundler/releases/download/jags-4.3.2/JAGS-4.3.2.pkg
        sudo installer -pkg JAGS-4.3.2.pkg -target /
        rm -f JAGS-4.3.2.pkg
        echo "Done installing JAGS!"
        echo "::endgroup::"
      if: inputs.jags
