inputs:
  r-version:
    required: false
    default: release

runs:
  using: "composite"
  steps: 
    - shell: bash
      if: runner.os == 'macos' && runner.arch == 'X64'
      run: |
        version="${{inputs.r-version}}"
        if [ "$version" = "devel" ]; then
          URL="https://mac.r-project.org/big-sur-x86_64/R-4.4-branch/R-4.4-branch-x86_64.pkg"
        elif [ "$version" = "release" ]; then
          URL="https://cloud.r-project.org/bin/macosx/big-sur-x86_64/base/R-4.4.1-x86_64.pkg"
        fi
        echo "Installing from $URL"
        PKG=$(basename $URL)
        curl --max-time 300 --retry 3 -sSfLO $URL
        sudo installer -pkg "$PKG" -target /
        rm -f $PKG

    - shell: pwsh
      if: runner.os == 'windows'
      run: |
        $version = "${{inputs.r-version}}"
        if ( $version -eq "devel" ) {
          $URL = "https://cran.rstudio.com/bin/windows/base/R-4.4.1-win.exe"
        } elseif ( $version -eq "release" ) {
          $URL = "https://cran.rstudio.com/bin/windows/base/R-4.4.1-win.exe"
        } elseif ( $version -eq "oldrel" ) {
          $URL = "https://cran.rstudio.com/bin/windows/base/old/4.3.3/R-4.3.3-win.exe"
        }
        curl -o Rinstall.exe -sSfL $URL
        echo "Starting R installer..."
        Start-Process "Rinstall.exe" -argumentlist "/VERYSILENT /SUPPRESSMSGBOXES /DIR=C:\\R" -wait
        echo "Done!"
        Remove-Item Rinstall.exe
        echo "C:\\R\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - shell: bash
      run: R --version

    - name: Start fake X11 server
      shell: bash
      if: runner.os == 'macos'
      continue-on-error: true
      run: |
        sudo nohup /opt/X11/bin/Xvfb :6 -screen 0 1280x1024x24 > ~/X.log &
        export DISPLAY=:6
        echo "Running fake X server on $DISPLAY"
        echo "DISPLAY=$DISPLAY" >> $GITHUB_ENV

    - name: Install Simon's CRAN binaries
      if: runner.os == 'macos'
      run: |
        source("https://mac.R-project.org/bin/install.R")
        pkgs <- c("fftw",         # CRAN ffw, ffwtools, PoissonBinomial, qqconf
                  "fribidi",      # CRAN ragg, textshaping
                  "gsl",          # BioC GLAD
                  "glpk",         # BioC MMUPHin
                  "hdf5",         # CRAN ncdf4 for Bioc mzR
                  "harfbuzz",     # CRAN ragg, textshaping
                  "netcdf",       # CRAN ncdf4 for Bioc mzR
                  "openssl",
                  "pkgconfig",
                  "pcre2",        # CRAN rJava
                  "proj",         # CRAN proj4
                  "protobuf",     # CRAN protolib
                  "udunits",      # CRAN lwgeom, sf, units
                  "xz")
        install.libs(pkgs)
      shell: R

    - name: Update PATH, PKG_CONFIG_PATH, OPENSSL_LIBS
      if: runner.os == 'macos' && runner.arch == 'X64'
      run: |
        echo "::group::Update PATH, PKG_CONFIG_PATH, OPENSSL_LIBS"
        PATH="/opt/R/x86_64/bin:$PATH"
        echo "/opt/R/x86_64/bin" >> $GITHUB_PATH
        export PKG_CONFIG_PATH="/opt/R/x86_64/lib/pkgconfig:/opt/R/x86_64/share/pkgconfig:/usr/lib/pkgconfig:/opt/X11/lib/pkgconfig:/opt/X11/share/pkgconfig"
        echo "PKG_CONFIG_PATH=${PKG_CONFIG_PATH}" >> $GITHUB_ENV
        echo "Available libs through pkg-config:"
        pkg-config --list-all
        echo "OPENSSL_LIBS=/opt/R/x86_64/lib/libssl.a /opt/R/x86_64/lib/libcrypto.a" >> $GITHUB_ENV
        echo "::endgroup::"
      shell: bash

    - name: Set Windows timezone
      if: runner.os == 'windows'
      run: |
        tzutil /g
        tzutil /s "GMT Standard Time"
        tzutil /g
      shell: pwsh
